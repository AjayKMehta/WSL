# https://tshafer.com/blog/2023/07/posit-package-manager-linux
options(
  HTTPUserAgent = sprintf(
    "R/%s R (%s)",
    getRversion(),
    paste(
      getRversion(),
      R.version["platform"],
      R.version["arch"],
      R.version["os"]
    )
  )
)

local({
  r <- getOption("repos")
  r["ropensci"] <- "https://ropensci.r-universe.dev"
  r["CRAN"] <- "https://packagemanager.posit.co/cran/__linux__/noble/latest"
  r["INLA"] <- "https://inla.r-inla-download.org/R/stable"
  options(repos = r)

  num_cores <- min(parallel::detectCores() - 1, 8)
  options(
    # Enable script file names and line numbers for tryCatchLog
    keep.source = TRUE,
    Ncpus = num_cores,
    mc.cores = num_cores,
    datatable.print.class = TRUE,
    datatable.print.nrows = 10,
    datatable.print.topn = 5,
    datatable.print.trunc.cols = TRUE,
    datatable.show.indices = TRUE,
    warnPartialMatchAttr = TRUE,
    warnPartialMatchDollar = TRUE,
    warnPartialMatchArgs = TRUE,
    # https://github.com/Ikuyadeu/vscode-R/wiki/RStudio-addin-support
    vsc.rstudioapi = TRUE,
    # https://www.tidyverse.org/blog/2021/03/clock-0-1-0/#production
    clock.strict = TRUE,
    rlang_backtrace_on_error = "full",
    rlang_backtrace_on_error_report = "branch",
    rlang_backtrace_on_warning = "full",
    rlang_backtrace_on_warning_report = "branch",
    # 5 min timeout for downloading files
    timeout = 300,
    brms.backend = "cmdstanr",
    brms.file_refit = "on_change"
  )

  if (interactive()) {
    if (
      requireNamespace("terminalgraphics", quietly = TRUE) &&
        terminalgraphics::has_sixel_support()
    ) {
      options(device = terminalgraphics::sixel)
    }

    is_vscode <- Sys.getenv("TERM_PROGRAM") == "vscode"
    is_rstudio <- Sys.getenv("RSTUDIO") == "1"
    has_httpgd <- "httpgd" %in% .packages(all.available = TRUE)
    if (has_httpgd) {
      # https://github.com/R-nvim/R.nvim/wiki/Configuration#using-httpgd-as-the-default-graphics-device
      options(device = httpgd::hgd)
    }

    if (is_vscode) {
      if (!is_rstudio) {
        source(file.path(Sys.getenv("HOME"), ".vscode-R", "init.R"))
      }
      if (has_httpgd) {
        options(vsc.use_httpgd = TRUE)
      }

      # activate RStudio Addins on command palette
      options(vsc.rstudioapi = TRUE)

      # How much of the object to show on hover and autocomplete detail?
      # As controlled by max.level arg of str().
      # Use 0 (or 1) is the default - literal value or object type and dimensions
      # Use 2 to show list contents, data frame columns, and example values.
      options(vsc.str.max.level = 2)
    }

    if (requireNamespace("progressr", quietly = TRUE)) {
      ## progressr reporting without need for with_progress()
      progressr::handlers(global = TRUE)

      ## Use 'cli', if installed ...
      if (requireNamespace("cli", quietly = TRUE)) {
        progressr::handlers("cli")
        ## Hand over all 'cli' progress reporting to 'progressr'
        options(cli.progress_handlers = "progressr")
      } else {
        ## ... otherwise use the one that comes with R
        progressr::handlers("txtprogressbar")
      }
      ## Reporting via RStudio, if running in the RStudio Console,
      ## but not the terminal
      if (is_rstudio && !nzchar(Sys.getenv("RSTUDIO_TERM"))) {
        progressr::handlers("rstudio", append = TRUE)
      }
    }

    if (requireNamespace("rlang", quietly = TRUE)) {
      # Promote base errors to rlang errors
      options(error = rlang::entrace)
      # Cause errors and warnings to be promoted to rlang conditions that
      # include a backtrace.
      rlang::global_entrace()
    }

    if (requireNamespace("rlang", quietly = TRUE)) {
      set_ollama_model <- function(model_name, num_ctx) {
        chat_model <- ellmer::chat_ollama(
          model = model_name,
          api_args = list(keep_alive = "30m", num_ctx = num_ctx)
        )
        options(
          .chores_chat = chat_model,
          # https://simonpcouch.github.io/gander/articles/gander.html#choosing-a-model
          .gander_chat = chat_model
        )
      }
    }
    require(colorout)

    # https://github.com/R-nvim/cmp-r?tab=readme-ov-file#languageserver
    # Disable completion from the language server -> use cmp_r instead
    options(
      languageserver.server_capabilities = list(
        completionProvider = FALSE,
        completionItemResolve = FALSE
      )
    )
  }
})
