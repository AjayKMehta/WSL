# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# set PATH so it includes user's bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

export XDG_CONFIG_HOME="$HOME/.config"

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# sh_script=$(code --locate-shell-integration-path bash)
# [[ "$TERM_PROGRAM" == "vscode" ]] && . $sh_script

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# https://superuser.com/questions/232885/can-you-share-wisdom-on-using-histignore-in-bash
# Ignore commands with 1-2 characters, beginning with space, etc.
HISTIGNORE="?:??:ls:[bf]g:exit:pwd:history:clear:mount:umount:[ \t]*"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Attempt spelling correction on directory names during word completion if the name as given does not exist.
shopt -s dirspell
# Include filenames starting with a period in the results of filename expansion.
shopt -s dotglob

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Alias definitions.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    # shellcheck source=/dev/null
    . ~/.bash_aliases
fi

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

shopt -s extglob
for f in ~/.config/bash_completions.d/!(*LICENSE*); do
   # shellcheck source=/dev/null
   . "$f"
done
shopt -u extglob

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Else, WSL uses node from Windows
nvm use stable

# mise
eval "$(mise activate bash)"

# oh my posh
eval "$(oh-my-posh init bash)"

choose_theme() {
   x=$(gum file /root/.cache/oh-my-posh/themes/)
   eval "$(oh-my-posh init bash -c "$x")"
}

[ -f "/home/ajay/.ghcup/env" ] && source "/home/ajay/.ghcup/env" # ghcup-env

# https://stackoverflow.com/questions/61110603/how-to-set-up-working-x11-forwarding-on-wsl2

#export DISPLAY=$(ip route list default | awk '{print $3}'):0
#export LIBGL_ALWAYS_INDIRECT=1

# https://superuser.com/a/835047/448598
bind 'set show-all-if-ambiguous on'
bind 'TAB:menu-complete'

# https://github.com/sharkdp/bat
batdiff() {
    git diff --name-only --relative --diff-filter=d | xargs bat --diff
}
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# shellcheck source=/home/ajay/.bash-preexec.sh
[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh

# shellcheck source=/home/ajay/.fzf.bash
# Utility script with useful functions
[ -f ~/.fzf.bash ] && source ~/.fzf.bash


# Based on https://junegunn.github.io/fzf/tips/ripgrep-integration/
# ripgrep->fzf->(neo)vim [QUERY]
rfv() (
  RELOAD='reload:rg --column --color=always --smart-case {q} || :'
  # shellcheck disable=SC2016
  OPENER='if [[ $FZF_SELECT_COUNT -eq 0 ]]; then
            nvim {1} +{2}     # No selection. Open the current line in Vim.
          else
            nvim +copen -q {+f}
          fi'
  fzf --disabled --ansi --multi \
      --bind "start:$RELOAD" --bind "change:$RELOAD" \
      --bind "enter:become:$OPENER" \
      --bind "ctrl-o:execute:$OPENER" \
      --bind 'alt-a:select-all,alt-d:deselect-all,ctrl-/:toggle-preview' \
      --delimiter : \
      --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
      --preview-window '~4,+{2}+4/3,<80(up)' \
      --query "$*"
)

# ~/.blerc will be used by default
# shellcheck disable=SC1090
source ~/.local/share/blesh/ble.sh
# source "$HOME/.local/share/blesh/ble.sh" --rcfile "$HOME/.blerc"

# Must come after sourcing ble.sh!
# '--disable-ctrl-r' doesn't work!
eval "$(atuin init bash --disable-up-arrow)"

export DOTNET_ROOT=/usr/share/dotnet

function yy() {
	local tmp
    tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd" || exit
	fi
	rm -f -- "$tmp"
}

# Add this line at the end of .bashrc:
[[ ${BLE_VERSION-} ]] && ble-attach

eval "$(register-python-argcomplete --shell bash pipx)"

# Initialize zoxide
# Not sure why it can't find it when location is in PATH!?
if ! ( which zoxide > /dev/null ); then
    echo "zoxide not found" >&2
else
    eval "$(zoxide init bash)"
fi

# shellcheck source=/dev/null
. "$HOME/.atuin/bin/env"
# shellcheck source=/dev/null
. "$HOME/.cargo/env"

# direnv
eval "$(direnv hook bash)"

# https://github.com/direnv/direnv/wiki/Python#bash
show_virtual_env() {
  if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
    echo "($(basename $VIRTUAL_ENV))"
  fi
}
export -f show_virtual_env
PS1='$(show_virtual_env)'$PS1
